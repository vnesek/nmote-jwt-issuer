buildscript {
    ext {
        kotlinVersion = "1.1.2-5"
        springBootVersion = "1.5.4.RELEASE"
        ningVersion = "1.9.38"
        restfbVersion = "1.41.0-PC"
        scribejavaVersion = "4.1.1"
        ahcVersion = "2.0.30"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}

plugins {
    id 'org.hidetake.ssh' version '2.9.0'
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"

jar {
    baseName = 'issuer'
    version = ['git', 'rev-parse', '--short', 'HEAD'].execute().text.trim()
}

sourceCompatibility = 1.8

description = 'Photomath JWT Token Issuer'


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
    compile "com.github.scribejava:scribejava-apis:$scribejavaVersion"
    compile "com.github.scribejava:scribejava-httpclient-ahc:$scribejavaVersion"
    compile "org.asynchttpclient:async-http-client:$ahcVersion"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "com.restfb:restfb:$restfbVersion"
    compile "io.jsonwebtoken:jjwt:0.7.0"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

springBoot {
    executable = true
    embeddedLaunchScriptProperties = [
            initInfoDescription     : project.description,
            initInfoShortDescription: project.name,
            initInfoProvides        : jar.baseName,
            mode                    : 'service'
    ]
}

def deployDir = '/opt/issuer/webapps'

remotes {
    f2_jetty {
        role 'build'
        host = 'f2.photomath.net'
        user = 'jetty'
        agent = true
    }

    f2_sudo {
        role 'manage'
        host = 'f2.photomath.net'
        user = System.properties['user.name']
        agent = true
    }
}

task deploy {
    group 'Deploy'
    description 'Deploys current version to production servers'

    doFirst {
        //def status = ['git', 'status', '--porcelain'].execute().text.trim()
        //if (status != '') throw new Exception("Please commit local changes before build: $status")
    }

    dependsOn clean, assemble
    assemble.mustRunAfter clean

    doLast {
        ssh.run {
            session(remotes.role('build')) {
                logger.info('Copying file {} to {}', jar.archivePath, deployDir)

                // Slow copy method
                // put from: jar.archivePath, into: deployDir

                // Fast copy method (but hardcoded user@host)
                execute "cp $deployDir/issuer.jar $deployDir/${jar.archiveName}"
                def user; execute("id -u -n") { user = it }
                def host; execute("hostname") { host = it }
                ['rsync', '-azvc', jar.archivePath.toString(), "${user}@${host}.photomath.net:$deployDir"].execute()

                // Link new version
                execute "rm $deployDir/issuer.jar"
                execute "ln -s $deployDir/${jar.archiveName} $deployDir/issuer.jar"
                logger.info('Deployed {}', project.version)
            }
        }
    }
}